@using prismic
@inject IPrismicApiAccessor accessor
@inject DocumentLinkResolver resolver

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">blazor</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>


 <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">

@*    <ul class="nav flex-column"> *@
<RadzenPanelMenu Style="width:300px">
        @if(pages == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var item in pages)
            {
                 <RadzenPanelMenuItem Text="@item.Name" Icon="home" Path="@item.Url">
                @foreach (var subItem in item.Items)
                {
                     <RadzenPanelMenuItem Text="@subItem.Name" Icon="home" Path="@subItem.Url"></RadzenPanelMenuItem>
                }
                     

                 </RadzenPanelMenuItem>
                @* <li class="nav-item px-3">
                    <NavLink class="nav-link" href="@item.Url" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> @item.Name
                    </NavLink>
                </li> *@
            }
        }
    @* </ul>*@
</RadzenPanelMenu>
</div> 
@code {
    List<MenuItem> pages;
    
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        var api = await accessor.GetApi();

        pages = new List<MenuItem>();
        pages.Add(new  MenuItem("Home", "/"));

        var cms = new  MenuItem("CMS", "");
        var cmsPages = await api.Query(Predicates.At("document.type", "simple_page")).Submit();
        foreach(var page in cmsPages.Results)
        {
            cms.Items.Add(new MenuItem(page.GetText("simple_page.title"), "/cms/" + page.Uid));
        }
        pages.Add(cms);

        var products = new  MenuItem("Products", "");
        var productPages = await api.Query(Predicates.At("document.type", "produc")).Submit();
        foreach(var page in productPages.Results)
        {
            products.Items.Add(new MenuItem(page.GetText("produc.product_name"), "/product/" + page.Uid));
        }
        pages.Add(products);

        pages.Add(new  MenuItem("Counter", "Counter"));
        pages.Add(new  MenuItem("Fetch data", "fetchdata"));
        pages.Add(new  MenuItem("Todo", "todo"));
        pages.Add(new  MenuItem("Test", "Test"));
        pages.Add(new  MenuItem("Form", "form"));
    }

    public class MenuItem
    {
        public MenuItem(string name, string url)
        {
            this.Name = name;
            this.Url = url;
            this.Items = new List<MenuItem>();
        }
        public string Name { get; set; }
        public string Url { get; set; }
        public List<MenuItem> Items { get; set; }
    }    

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
